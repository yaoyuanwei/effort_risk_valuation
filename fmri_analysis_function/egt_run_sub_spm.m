function matlabbatch = egt_run_sub_spm(task_name, anal_type, anal_fold, nr_ind, si)
% EGT_RUN_SUB_SPM: Run first level analysis on SPM for effort-based gambling
% July 23, 2023, Yuanwei Yao
%
% Input:
%   task_name:  Name of the task for analysis, e.g., 'edt'
%   anal_type:  Type of task type: MVPA or univariate
%   anal_fold:  Name of the main fMRI analysis folder
%   nr_ind:     No-response index
%   si:         Subject numeric id (e.g., 20)
%
% Output:
%   sub_sv:     Subjective values for each subject
%   sub_data:   Data for a subject

    % Name for the model
    model_i     = [task_name, '_model_sv'];

    % Contrast number: sv
    n_con   = 1;

    % Number of key regressors: high and low sv
    n_kreg  = 2;

    % Run 1 excluded for sub 35 and 52
    no_r1   = [35, 52];

    % Run 4 excluded for sub 57
    no_r4   = 57;

    % Put them together
    no_rall = [35, 52, 57];

    % Subject folder for fMRI data
    sub_fold    = fullfile(anal_fold, ['sub-', num2str(si)]);

    % Univariate analysis is based on soomthed data
    if strcmp(anal_type, 'univariate')

        % Prefix for smoothed data
        dat_filt = '^swr.*\.nii$';

    % MVPA is based on unsmoothed data
    elseif strcmp(anal_type, 'mvpa')

        % Prefix for unsmoothed data
        dat_filt = '^wr.*\.nii$';
    end 

    % Read head motion txt files
    rpfiles = fullfile(sub_fold, 'rp', '*.txt');

    % Find the name of head motion files
    rpinfo  = dir(rpfiles);
    
    % NOTE: the rp for run1 is always at last because of the file name generated by dpabi
    rp_od   = [5,1:4];

    % Initialize weight vector
    w_vec_comb  = [];

    % Initiate spm batch structure
    matlabbatch = {};

    % Initiate stuctures to store fMRI, head motion, and multipe regressors
    fimg    = {};
    hmotion = {};
    mreg    = {};

    % If all runs intact
    if ~ismember(si, no_rall)

        % Load an empty spm file so that we can only fill out the necessary inputs
        load(fullfile(anal_fold, 'spm_model', 'egt_model.mat')); 

        % Run id
        run_vet = (1:5);

    % If run1 is excluded
    elseif ismember(si, no_r1)

        % Load an empty spm file so that we can only fill out the necessary inputs
        load(fullfile(anal_fold, 'spm_model', 'egt_model_4r.mat'));

        % Run id
        run_vet = (2:5);

    % If run4 is excluded
    elseif ismember(si, no_r4)

        % Load an empty spm file so that we can only fill out the necessary inputs
        load(fullfile(anal_fold, 'spm_model', 'egt_model_4r.mat'));

        % Run id
        run_vet = [1,2,3,5];

    end % End ismember(si, no_rall) loop
    
    % Number of runs
    run_n  = length(run_vet);

    % Loop through runs        
    for i = 1:run_n

        % Run index
        ri = run_vet(i);

        % fMRI data path
        fimg{i}.path   = spm_select('ExtFPListRec', fullfile(sub_fold,['fun', num2str(ri)]), dat_filt, Inf);
        
        % Head motion file path order: 5 1 2 3 4
        rp_ri   = rp_od(ri);

        % Get the full path of the head motion file and name
        hmotion{i}.path = fullfile(sub_fold,'rp', rpinfo(rp_ri).name);
        
        % Load regressors files we generated before
        mreg{i}.path    = [sub_fold '/beh/' model_i '_r' num2str(ri) '.mat'];
        
        %% Specify necessary SPM inputs
        % Output directory
        matlabbatch{1}.spm.stats.fmri_spec.dir = {[sub_fold '/results/' model_i]};

        % Path of fMRI data
        matlabbatch{1}.spm.stats.fmri_spec.sess(i).scans = cellstr(fimg{i}.path);

        % Path of regressors
        matlabbatch{1}.spm.stats.fmri_spec.sess(i).multi = {mreg{i}.path};

        % Path of the head motion file
        matlabbatch{1}.spm.stats.fmri_spec.sess(i).multi_reg = {hmotion{i}.path}; 
    end

    % Generate weighted contrast vector required by SPM
    nr_ri   = nr_ind(1,run_vet);

    % Create the weight vector for each run 
    for ri = 1:run_n

        % Check if there are any no-response trials 
        if (nr_ri == 1) 

            % If so, this run has 3 events: sv_high, sv_low, missing
            n_reg   = (n_kreg+1+6);

        % Check if there are any no-response trials 
        elseif (nr_ri == 0)

            % Otherwise, only 2 events: sv_high, sv_low
            n_reg   = (n_kreg+6);
        end

        % Initiate the weight vector
        w_vec   = zeros(n_con, n_reg);

        % High sv coded as 1
        w_vec(1,1)  = 1/run_n;

        % Low sv coded as -1
        w_vec(1,2)  = -1/run_n;

        % Concatenate the weight vector
        w_vec_comb  = [w_vec_comb, w_vec];
    end 
    
    % Contrast name
    matlabbatch{3}.spm.stats.con.consess{1}.tcon.name='high_low_sv';

    % Only one row for the contrast vector
    matlabbatch{3}.spm.stats.con.consess{1}.tcon.weights= w_vec_comb(1,:);

    % No need to repeat vectors
    matlabbatch{3}.spm.stats.con.consess{1}.tcon.sessrep='none';
    
    % Save batch file for each subject
    save([sub_fold '/' model_i '_sub-' int2str(si) '.mat'],'matlabbatch');

    % Run spm
    spm_jobman('run', matlabbatch);
    
    % Back to the analysis directory       
    cd(anal_fold);
end
