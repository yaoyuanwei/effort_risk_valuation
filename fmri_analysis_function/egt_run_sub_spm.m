% Function to run 1st-level analysis on SPM
% Author: Yuanwei Yao
% Date: July 23, 2023

function matlabbatch = egt_run_sub_spm(task_name, anal_type, anal_fold, nr_ind, si)

    % name for the model
    model_i     = [task_name, '_model_sv'];

    % contrast number: sv
    n_con   = 1;
    % number of key regressors: high and low sv
    n_kreg  = 2;

    % run 1 excluded for sub 35 and 52
    no_r1   = [35, 52];
    % run 4 excluded for sub 57
    no_r4   = 57;
    % put them together
    no_rall = [35, 52, 57];

    % fold for fMRI data
    sub_fold    = fullfile(anal_fold, ['sub-', num2str(si)]);

    % univariate analysis is based on soomthed data
    if strcmp(anal_type, 'univariate')
        dat_filt = '^swr.*\.nii$';
    % but mvpa based on unsmoothed data
    elseif strcmp(anal_type, 'mvpa')
        dat_filt = '^wr.*\.nii$';
    end 

    % read head motion files
    rpfiles = fullfile(sub_fold, 'rp', '*.txt');
    rpinfo  = dir(rpfiles);
    % NOTE: the rp for run1 is always at last because of the file name generated by dpabi
    rp_od   = [5,1:4];

    % initialize weight vector and batch structure
    w_vec_comb  = [];
    matlabbatch = {};

    % initiate stuctures to store fMRI, head motion, and multipe regressors
    fimg = {};
    hmotion = {};
    mreg = {};

    % if all runs intact
    if ~ismember(si, no_rall)

        % load an empty spm file so that we can only fill out the necessary inputs
        load(fullfile(anal_fold, 'spm_model', 'egt_model.mat')); 

        % run id
        run_vet = (1:5);

    % if run1 is excluded
    elseif ismember(si, no_r1)

        % load an empty spm file so that we can only fill out the necessary inputs
        load(fullfile(anal_fold, 'spm_model', 'egt_model_4r.mat'));

        % run id
        run_vet = (2:5);

    % if run4 is excluded
    elseif ismember(si, no_r4)

        % load an empty spm file so that we can only fill out the necessary inputs
        load(fullfile(anal_fold, 'spm_model', 'egt_model_4r.mat'));

        % run id
        run_vet = [1,2,3,5];

    end % end ismember(si, no_rall) loop
    
    % number of runs
    run_n  = length(run_vet);

    % loop through runs        
    for i = 1:run_n

        % run index
        ri = run_vet(i);

        % fMRI data path
        fimg{i}.path   = spm_select('ExtFPListRec', fullfile(sub_fold,['fun', num2str(ri)]), dat_filt, Inf);
        
        % head motion file path
        % special order: 5 1 2 3 4
        rp_ri   = rp_od(ri);
        hmotion{i}.path = fullfile(sub_fold,'rp', rpinfo(rp_ri).name);
        
        % load regressors files we generated before
        mreg{i}.path    = [sub_fold '/beh/' model_i '_r' num2str(ri) '.mat'];
        
        % output directory
        matlabbatch{1}.spm.stats.fmri_spec.dir = {[sub_fold '/results/' model_i]};

        % add fMRI data, regressors, and rp file to the spm file
        matlabbatch{1}.spm.stats.fmri_spec.sess(i).scans = cellstr(fimg{i}.path);
        matlabbatch{1}.spm.stats.fmri_spec.sess(i).multi = {mreg{i}.path};
        matlabbatch{1}.spm.stats.fmri_spec.sess(i).multi_reg = {hmotion{i}.path}; 
    end

    % generate weighted contrast vector required by SPM
    nr_ri   = nr_ind(1,run_vet);
    for ri = 1:run_n
        % check if there are any no-response trials 
        if (nr_ri == 1) 
            % if so, this run has 3 events: sv_high, sv_low, missing
            n_reg   = (n_kreg+1+6);
            w_vec   = zeros(n_con, n_reg);
        elseif (nr_ri == 0) 
            % otherwise, only 2 events: sv_high, sv_low
            n_reg   = (n_kreg+6);
            w_vec   = zeros(n_con, n_reg);
        end
        % we are interested in high vs. low sv condition
        w_vec(1,1)  = 1/run_n;
        w_vec(1,2)  = -1/run_n;
        % concatenate the weight vector
        w_vec_comb  = [w_vec_comb, w_vec];
    end 
    
    % add contrast vector to the spm file
    matlabbatch{3}.spm.stats.con.consess{1}.tcon.name='high_low_sv';
    matlabbatch{3}.spm.stats.con.consess{1}.tcon.weights= w_vec_comb(1,:);
    matlabbatch{3}.spm.stats.con.consess{1}.tcon.sessrep='none';
    
    % save batch file for each sub for checking
    save([sub_fold '/' model_i '_sub-' int2str(si) '.mat'],'matlabbatch');

    % run spm
    spm_jobman('run', matlabbatch);
           
    cd(anal_fold);
end
